// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockShareHolderValidators is an autogenerated mock type for the ShareHolderValidators type
type MockShareHolderValidators struct {
	mock.Mock
}

type MockShareHolderValidators_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShareHolderValidators) EXPECT() *MockShareHolderValidators_Expecter {
	return &MockShareHolderValidators_Expecter{mock: &_m.Mock}
}

// IsShareHolderExists provides a mock function with given fields: userID, marketChannelID
func (_m *MockShareHolderValidators) IsShareHolderExists(userID uuid.UUID, marketChannelID uuid.UUID) bool {
	ret := _m.Called(userID, marketChannelID)

	if len(ret) == 0 {
		panic("no return value specified for IsShareHolderExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(userID, marketChannelID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockShareHolderValidators_IsShareHolderExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsShareHolderExists'
type MockShareHolderValidators_IsShareHolderExists_Call struct {
	*mock.Call
}

// IsShareHolderExists is a helper method to define mock.On call
//   - userID uuid.UUID
//   - marketChannelID uuid.UUID
func (_e *MockShareHolderValidators_Expecter) IsShareHolderExists(userID interface{}, marketChannelID interface{}) *MockShareHolderValidators_IsShareHolderExists_Call {
	return &MockShareHolderValidators_IsShareHolderExists_Call{Call: _e.mock.On("IsShareHolderExists", userID, marketChannelID)}
}

func (_c *MockShareHolderValidators_IsShareHolderExists_Call) Run(run func(userID uuid.UUID, marketChannelID uuid.UUID)) *MockShareHolderValidators_IsShareHolderExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockShareHolderValidators_IsShareHolderExists_Call) Return(_a0 bool) *MockShareHolderValidators_IsShareHolderExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShareHolderValidators_IsShareHolderExists_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) bool) *MockShareHolderValidators_IsShareHolderExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTransferShares provides a mock function with given fields: shareCount, fromShareHolderShareCount, totalShares
func (_m *MockShareHolderValidators) ValidateTransferShares(shareCount int, fromShareHolderShareCount int, totalShares int) error {
	ret := _m.Called(shareCount, fromShareHolderShareCount, totalShares)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTransferShares")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(shareCount, fromShareHolderShareCount, totalShares)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockShareHolderValidators_ValidateTransferShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTransferShares'
type MockShareHolderValidators_ValidateTransferShares_Call struct {
	*mock.Call
}

// ValidateTransferShares is a helper method to define mock.On call
//   - shareCount int
//   - fromShareHolderShareCount int
//   - totalShares int
func (_e *MockShareHolderValidators_Expecter) ValidateTransferShares(shareCount interface{}, fromShareHolderShareCount interface{}, totalShares interface{}) *MockShareHolderValidators_ValidateTransferShares_Call {
	return &MockShareHolderValidators_ValidateTransferShares_Call{Call: _e.mock.On("ValidateTransferShares", shareCount, fromShareHolderShareCount, totalShares)}
}

func (_c *MockShareHolderValidators_ValidateTransferShares_Call) Run(run func(shareCount int, fromShareHolderShareCount int, totalShares int)) *MockShareHolderValidators_ValidateTransferShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockShareHolderValidators_ValidateTransferShares_Call) Return(_a0 error) *MockShareHolderValidators_ValidateTransferShares_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShareHolderValidators_ValidateTransferShares_Call) RunAndReturn(run func(int, int, int) error) *MockShareHolderValidators_ValidateTransferShares_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTransferSharesInput provides a mock function with given fields: marketChannelID, fromUserID, toUserID, shareCount
func (_m *MockShareHolderValidators) ValidateTransferSharesInput(marketChannelID uuid.UUID, fromUserID uuid.UUID, toUserID uuid.UUID, shareCount int) error {
	ret := _m.Called(marketChannelID, fromUserID, toUserID, shareCount)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTransferSharesInput")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID, int) error); ok {
		r0 = rf(marketChannelID, fromUserID, toUserID, shareCount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockShareHolderValidators_ValidateTransferSharesInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTransferSharesInput'
type MockShareHolderValidators_ValidateTransferSharesInput_Call struct {
	*mock.Call
}

// ValidateTransferSharesInput is a helper method to define mock.On call
//   - marketChannelID uuid.UUID
//   - fromUserID uuid.UUID
//   - toUserID uuid.UUID
//   - shareCount int
func (_e *MockShareHolderValidators_Expecter) ValidateTransferSharesInput(marketChannelID interface{}, fromUserID interface{}, toUserID interface{}, shareCount interface{}) *MockShareHolderValidators_ValidateTransferSharesInput_Call {
	return &MockShareHolderValidators_ValidateTransferSharesInput_Call{Call: _e.mock.On("ValidateTransferSharesInput", marketChannelID, fromUserID, toUserID, shareCount)}
}

func (_c *MockShareHolderValidators_ValidateTransferSharesInput_Call) Run(run func(marketChannelID uuid.UUID, fromUserID uuid.UUID, toUserID uuid.UUID, shareCount int)) *MockShareHolderValidators_ValidateTransferSharesInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(int))
	})
	return _c
}

func (_c *MockShareHolderValidators_ValidateTransferSharesInput_Call) Return(_a0 error) *MockShareHolderValidators_ValidateTransferSharesInput_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShareHolderValidators_ValidateTransferSharesInput_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, uuid.UUID, int) error) *MockShareHolderValidators_ValidateTransferSharesInput_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShareHolderValidators creates a new instance of MockShareHolderValidators. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShareHolderValidators(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShareHolderValidators {
	mock := &MockShareHolderValidators{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
