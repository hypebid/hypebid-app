// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockAuctionValidators is an autogenerated mock type for the AuctionValidators type
type MockAuctionValidators struct {
	mock.Mock
}

type MockAuctionValidators_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuctionValidators) EXPECT() *MockAuctionValidators_Expecter {
	return &MockAuctionValidators_Expecter{mock: &_m.Mock}
}

// IsAuctionExists provides a mock function with given fields: auctionID
func (_m *MockAuctionValidators) IsAuctionExists(auctionID uuid.UUID) bool {
	ret := _m.Called(auctionID)

	if len(ret) == 0 {
		panic("no return value specified for IsAuctionExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(auctionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAuctionValidators_IsAuctionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuctionExists'
type MockAuctionValidators_IsAuctionExists_Call struct {
	*mock.Call
}

// IsAuctionExists is a helper method to define mock.On call
//   - auctionID uuid.UUID
func (_e *MockAuctionValidators_Expecter) IsAuctionExists(auctionID interface{}) *MockAuctionValidators_IsAuctionExists_Call {
	return &MockAuctionValidators_IsAuctionExists_Call{Call: _e.mock.On("IsAuctionExists", auctionID)}
}

func (_c *MockAuctionValidators_IsAuctionExists_Call) Run(run func(auctionID uuid.UUID)) *MockAuctionValidators_IsAuctionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuctionValidators_IsAuctionExists_Call) Return(_a0 bool) *MockAuctionValidators_IsAuctionExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuctionValidators_IsAuctionExists_Call) RunAndReturn(run func(uuid.UUID) bool) *MockAuctionValidators_IsAuctionExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAuctionID provides a mock function with given fields: auctionID
func (_m *MockAuctionValidators) ValidateAuctionID(auctionID string) error {
	ret := _m.Called(auctionID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAuctionID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(auctionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuctionValidators_ValidateAuctionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAuctionID'
type MockAuctionValidators_ValidateAuctionID_Call struct {
	*mock.Call
}

// ValidateAuctionID is a helper method to define mock.On call
//   - auctionID string
func (_e *MockAuctionValidators_Expecter) ValidateAuctionID(auctionID interface{}) *MockAuctionValidators_ValidateAuctionID_Call {
	return &MockAuctionValidators_ValidateAuctionID_Call{Call: _e.mock.On("ValidateAuctionID", auctionID)}
}

func (_c *MockAuctionValidators_ValidateAuctionID_Call) Run(run func(auctionID string)) *MockAuctionValidators_ValidateAuctionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuctionValidators_ValidateAuctionID_Call) Return(_a0 error) *MockAuctionValidators_ValidateAuctionID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuctionValidators_ValidateAuctionID_Call) RunAndReturn(run func(string) error) *MockAuctionValidators_ValidateAuctionID_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateChannelID provides a mock function with given fields: channelID
func (_m *MockAuctionValidators) ValidateChannelID(channelID string) error {
	ret := _m.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateChannelID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuctionValidators_ValidateChannelID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateChannelID'
type MockAuctionValidators_ValidateChannelID_Call struct {
	*mock.Call
}

// ValidateChannelID is a helper method to define mock.On call
//   - channelID string
func (_e *MockAuctionValidators_Expecter) ValidateChannelID(channelID interface{}) *MockAuctionValidators_ValidateChannelID_Call {
	return &MockAuctionValidators_ValidateChannelID_Call{Call: _e.mock.On("ValidateChannelID", channelID)}
}

func (_c *MockAuctionValidators_ValidateChannelID_Call) Run(run func(channelID string)) *MockAuctionValidators_ValidateChannelID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuctionValidators_ValidateChannelID_Call) Return(_a0 error) *MockAuctionValidators_ValidateChannelID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuctionValidators_ValidateChannelID_Call) RunAndReturn(run func(string) error) *MockAuctionValidators_ValidateChannelID_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateInstanceID provides a mock function with given fields: instanceID
func (_m *MockAuctionValidators) ValidateInstanceID(instanceID string) error {
	ret := _m.Called(instanceID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateInstanceID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(instanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuctionValidators_ValidateInstanceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateInstanceID'
type MockAuctionValidators_ValidateInstanceID_Call struct {
	*mock.Call
}

// ValidateInstanceID is a helper method to define mock.On call
//   - instanceID string
func (_e *MockAuctionValidators_Expecter) ValidateInstanceID(instanceID interface{}) *MockAuctionValidators_ValidateInstanceID_Call {
	return &MockAuctionValidators_ValidateInstanceID_Call{Call: _e.mock.On("ValidateInstanceID", instanceID)}
}

func (_c *MockAuctionValidators_ValidateInstanceID_Call) Run(run func(instanceID string)) *MockAuctionValidators_ValidateInstanceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuctionValidators_ValidateInstanceID_Call) Return(_a0 error) *MockAuctionValidators_ValidateInstanceID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuctionValidators_ValidateInstanceID_Call) RunAndReturn(run func(string) error) *MockAuctionValidators_ValidateInstanceID_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUserForBid provides a mock function with given fields: userID, amount
func (_m *MockAuctionValidators) ValidateUserForBid(userID uuid.UUID, amount float64) error {
	ret := _m.Called(userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserForBid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) error); ok {
		r0 = rf(userID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuctionValidators_ValidateUserForBid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUserForBid'
type MockAuctionValidators_ValidateUserForBid_Call struct {
	*mock.Call
}

// ValidateUserForBid is a helper method to define mock.On call
//   - userID uuid.UUID
//   - amount float64
func (_e *MockAuctionValidators_Expecter) ValidateUserForBid(userID interface{}, amount interface{}) *MockAuctionValidators_ValidateUserForBid_Call {
	return &MockAuctionValidators_ValidateUserForBid_Call{Call: _e.mock.On("ValidateUserForBid", userID, amount)}
}

func (_c *MockAuctionValidators_ValidateUserForBid_Call) Run(run func(userID uuid.UUID, amount float64)) *MockAuctionValidators_ValidateUserForBid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(float64))
	})
	return _c
}

func (_c *MockAuctionValidators_ValidateUserForBid_Call) Return(_a0 error) *MockAuctionValidators_ValidateUserForBid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuctionValidators_ValidateUserForBid_Call) RunAndReturn(run func(uuid.UUID, float64) error) *MockAuctionValidators_ValidateUserForBid_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuctionValidators creates a new instance of MockAuctionValidators. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuctionValidators(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuctionValidators {
	mock := &MockAuctionValidators{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
