// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockShareHolderValidator is an autogenerated mock type for the ShareHolderValidator type
type MockShareHolderValidator struct {
	mock.Mock
}

type MockShareHolderValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShareHolderValidator) EXPECT() *MockShareHolderValidator_Expecter {
	return &MockShareHolderValidator_Expecter{mock: &_m.Mock}
}

// IsShareHolderExists provides a mock function with given fields: userID, marketChannelID
func (_m *MockShareHolderValidator) IsShareHolderExists(userID uuid.UUID, marketChannelID uuid.UUID) bool {
	ret := _m.Called(userID, marketChannelID)

	if len(ret) == 0 {
		panic("no return value specified for IsShareHolderExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(userID, marketChannelID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockShareHolderValidator_IsShareHolderExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsShareHolderExists'
type MockShareHolderValidator_IsShareHolderExists_Call struct {
	*mock.Call
}

// IsShareHolderExists is a helper method to define mock.On call
//   - userID uuid.UUID
//   - marketChannelID uuid.UUID
func (_e *MockShareHolderValidator_Expecter) IsShareHolderExists(userID interface{}, marketChannelID interface{}) *MockShareHolderValidator_IsShareHolderExists_Call {
	return &MockShareHolderValidator_IsShareHolderExists_Call{Call: _e.mock.On("IsShareHolderExists", userID, marketChannelID)}
}

func (_c *MockShareHolderValidator_IsShareHolderExists_Call) Run(run func(userID uuid.UUID, marketChannelID uuid.UUID)) *MockShareHolderValidator_IsShareHolderExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockShareHolderValidator_IsShareHolderExists_Call) Return(_a0 bool) *MockShareHolderValidator_IsShareHolderExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShareHolderValidator_IsShareHolderExists_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) bool) *MockShareHolderValidator_IsShareHolderExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShareHolderValidator creates a new instance of MockShareHolderValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShareHolderValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShareHolderValidator {
	mock := &MockShareHolderValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
