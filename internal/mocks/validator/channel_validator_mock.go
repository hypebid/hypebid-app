// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockChannelValidator is an autogenerated mock type for the ChannelValidator type
type MockChannelValidator struct {
	mock.Mock
}

type MockChannelValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChannelValidator) EXPECT() *MockChannelValidator_Expecter {
	return &MockChannelValidator_Expecter{mock: &_m.Mock}
}

// IsChannelExists provides a mock function with given fields: channelID
func (_m *MockChannelValidator) IsChannelExists(channelID uuid.UUID) bool {
	ret := _m.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for IsChannelExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(channelID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChannelValidator_IsChannelExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsChannelExists'
type MockChannelValidator_IsChannelExists_Call struct {
	*mock.Call
}

// IsChannelExists is a helper method to define mock.On call
//   - channelID uuid.UUID
func (_e *MockChannelValidator_Expecter) IsChannelExists(channelID interface{}) *MockChannelValidator_IsChannelExists_Call {
	return &MockChannelValidator_IsChannelExists_Call{Call: _e.mock.On("IsChannelExists", channelID)}
}

func (_c *MockChannelValidator_IsChannelExists_Call) Run(run func(channelID uuid.UUID)) *MockChannelValidator_IsChannelExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockChannelValidator_IsChannelExists_Call) Return(_a0 bool) *MockChannelValidator_IsChannelExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelValidator_IsChannelExists_Call) RunAndReturn(run func(uuid.UUID) bool) *MockChannelValidator_IsChannelExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateChannelID provides a mock function with given fields: channelID
func (_m *MockChannelValidator) ValidateChannelID(channelID string) error {
	ret := _m.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateChannelID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChannelValidator_ValidateChannelID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateChannelID'
type MockChannelValidator_ValidateChannelID_Call struct {
	*mock.Call
}

// ValidateChannelID is a helper method to define mock.On call
//   - channelID string
func (_e *MockChannelValidator_Expecter) ValidateChannelID(channelID interface{}) *MockChannelValidator_ValidateChannelID_Call {
	return &MockChannelValidator_ValidateChannelID_Call{Call: _e.mock.On("ValidateChannelID", channelID)}
}

func (_c *MockChannelValidator_ValidateChannelID_Call) Run(run func(channelID string)) *MockChannelValidator_ValidateChannelID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChannelValidator_ValidateChannelID_Call) Return(_a0 error) *MockChannelValidator_ValidateChannelID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelValidator_ValidateChannelID_Call) RunAndReturn(run func(string) error) *MockChannelValidator_ValidateChannelID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChannelValidator creates a new instance of MockChannelValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChannelValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChannelValidator {
	mock := &MockChannelValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
