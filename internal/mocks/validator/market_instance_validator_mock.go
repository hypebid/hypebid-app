// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockMarketInstanceValidator is an autogenerated mock type for the MarketInstanceValidator type
type MockMarketInstanceValidator struct {
	mock.Mock
}

type MockMarketInstanceValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMarketInstanceValidator) EXPECT() *MockMarketInstanceValidator_Expecter {
	return &MockMarketInstanceValidator_Expecter{mock: &_m.Mock}
}

// IsMarketInstanceExists provides a mock function with given fields: instanceID
func (_m *MockMarketInstanceValidator) IsMarketInstanceExists(instanceID uuid.UUID) bool {
	ret := _m.Called(instanceID)

	if len(ret) == 0 {
		panic("no return value specified for IsMarketInstanceExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(instanceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMarketInstanceValidator_IsMarketInstanceExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMarketInstanceExists'
type MockMarketInstanceValidator_IsMarketInstanceExists_Call struct {
	*mock.Call
}

// IsMarketInstanceExists is a helper method to define mock.On call
//   - instanceID uuid.UUID
func (_e *MockMarketInstanceValidator_Expecter) IsMarketInstanceExists(instanceID interface{}) *MockMarketInstanceValidator_IsMarketInstanceExists_Call {
	return &MockMarketInstanceValidator_IsMarketInstanceExists_Call{Call: _e.mock.On("IsMarketInstanceExists", instanceID)}
}

func (_c *MockMarketInstanceValidator_IsMarketInstanceExists_Call) Run(run func(instanceID uuid.UUID)) *MockMarketInstanceValidator_IsMarketInstanceExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketInstanceValidator_IsMarketInstanceExists_Call) Return(_a0 bool) *MockMarketInstanceValidator_IsMarketInstanceExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMarketInstanceValidator_IsMarketInstanceExists_Call) RunAndReturn(run func(uuid.UUID) bool) *MockMarketInstanceValidator_IsMarketInstanceExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateInstanceID provides a mock function with given fields: instanceID
func (_m *MockMarketInstanceValidator) ValidateInstanceID(instanceID string) error {
	ret := _m.Called(instanceID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateInstanceID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(instanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMarketInstanceValidator_ValidateInstanceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateInstanceID'
type MockMarketInstanceValidator_ValidateInstanceID_Call struct {
	*mock.Call
}

// ValidateInstanceID is a helper method to define mock.On call
//   - instanceID string
func (_e *MockMarketInstanceValidator_Expecter) ValidateInstanceID(instanceID interface{}) *MockMarketInstanceValidator_ValidateInstanceID_Call {
	return &MockMarketInstanceValidator_ValidateInstanceID_Call{Call: _e.mock.On("ValidateInstanceID", instanceID)}
}

func (_c *MockMarketInstanceValidator_ValidateInstanceID_Call) Run(run func(instanceID string)) *MockMarketInstanceValidator_ValidateInstanceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMarketInstanceValidator_ValidateInstanceID_Call) Return(_a0 error) *MockMarketInstanceValidator_ValidateInstanceID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMarketInstanceValidator_ValidateInstanceID_Call) RunAndReturn(run func(string) error) *MockMarketInstanceValidator_ValidateInstanceID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMarketInstanceValidator creates a new instance of MockMarketInstanceValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMarketInstanceValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMarketInstanceValidator {
	mock := &MockMarketInstanceValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
