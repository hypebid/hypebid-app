// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockUserValidator is an autogenerated mock type for the UserValidator type
type MockUserValidator struct {
	mock.Mock
}

type MockUserValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserValidator) EXPECT() *MockUserValidator_Expecter {
	return &MockUserValidator_Expecter{mock: &_m.Mock}
}

// IsUserExists provides a mock function with given fields: userID
func (_m *MockUserValidator) IsUserExists(userID uuid.UUID) bool {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockUserValidator_IsUserExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserExists'
type MockUserValidator_IsUserExists_Call struct {
	*mock.Call
}

// IsUserExists is a helper method to define mock.On call
//   - userID uuid.UUID
func (_e *MockUserValidator_Expecter) IsUserExists(userID interface{}) *MockUserValidator_IsUserExists_Call {
	return &MockUserValidator_IsUserExists_Call{Call: _e.mock.On("IsUserExists", userID)}
}

func (_c *MockUserValidator_IsUserExists_Call) Run(run func(userID uuid.UUID)) *MockUserValidator_IsUserExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserValidator_IsUserExists_Call) Return(_a0 bool) *MockUserValidator_IsUserExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserValidator_IsUserExists_Call) RunAndReturn(run func(uuid.UUID) bool) *MockUserValidator_IsUserExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUserBalance provides a mock function with given fields: userID, amount
func (_m *MockUserValidator) ValidateUserBalance(userID uuid.UUID, amount float64) bool {
	ret := _m.Called(userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserBalance")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) bool); ok {
		r0 = rf(userID, amount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockUserValidator_ValidateUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUserBalance'
type MockUserValidator_ValidateUserBalance_Call struct {
	*mock.Call
}

// ValidateUserBalance is a helper method to define mock.On call
//   - userID uuid.UUID
//   - amount float64
func (_e *MockUserValidator_Expecter) ValidateUserBalance(userID interface{}, amount interface{}) *MockUserValidator_ValidateUserBalance_Call {
	return &MockUserValidator_ValidateUserBalance_Call{Call: _e.mock.On("ValidateUserBalance", userID, amount)}
}

func (_c *MockUserValidator_ValidateUserBalance_Call) Run(run func(userID uuid.UUID, amount float64)) *MockUserValidator_ValidateUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(float64))
	})
	return _c
}

func (_c *MockUserValidator_ValidateUserBalance_Call) Return(_a0 bool) *MockUserValidator_ValidateUserBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserValidator_ValidateUserBalance_Call) RunAndReturn(run func(uuid.UUID, float64) bool) *MockUserValidator_ValidateUserBalance_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUserForBid provides a mock function with given fields: userID, amount
func (_m *MockUserValidator) ValidateUserForBid(userID uuid.UUID, amount float64) error {
	ret := _m.Called(userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserForBid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) error); ok {
		r0 = rf(userID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserValidator_ValidateUserForBid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUserForBid'
type MockUserValidator_ValidateUserForBid_Call struct {
	*mock.Call
}

// ValidateUserForBid is a helper method to define mock.On call
//   - userID uuid.UUID
//   - amount float64
func (_e *MockUserValidator_Expecter) ValidateUserForBid(userID interface{}, amount interface{}) *MockUserValidator_ValidateUserForBid_Call {
	return &MockUserValidator_ValidateUserForBid_Call{Call: _e.mock.On("ValidateUserForBid", userID, amount)}
}

func (_c *MockUserValidator_ValidateUserForBid_Call) Run(run func(userID uuid.UUID, amount float64)) *MockUserValidator_ValidateUserForBid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(float64))
	})
	return _c
}

func (_c *MockUserValidator_ValidateUserForBid_Call) Return(_a0 error) *MockUserValidator_ValidateUserForBid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserValidator_ValidateUserForBid_Call) RunAndReturn(run func(uuid.UUID, float64) error) *MockUserValidator_ValidateUserForBid_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserValidator creates a new instance of MockUserValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserValidator {
	mock := &MockUserValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
