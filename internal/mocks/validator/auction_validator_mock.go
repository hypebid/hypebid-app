// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockAuctionValidator is an autogenerated mock type for the AuctionValidator type
type MockAuctionValidator struct {
	mock.Mock
}

type MockAuctionValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuctionValidator) EXPECT() *MockAuctionValidator_Expecter {
	return &MockAuctionValidator_Expecter{mock: &_m.Mock}
}

// IsAuctionExists provides a mock function with given fields: auctionID
func (_m *MockAuctionValidator) IsAuctionExists(auctionID uuid.UUID) bool {
	ret := _m.Called(auctionID)

	if len(ret) == 0 {
		panic("no return value specified for IsAuctionExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(auctionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAuctionValidator_IsAuctionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuctionExists'
type MockAuctionValidator_IsAuctionExists_Call struct {
	*mock.Call
}

// IsAuctionExists is a helper method to define mock.On call
//   - auctionID uuid.UUID
func (_e *MockAuctionValidator_Expecter) IsAuctionExists(auctionID interface{}) *MockAuctionValidator_IsAuctionExists_Call {
	return &MockAuctionValidator_IsAuctionExists_Call{Call: _e.mock.On("IsAuctionExists", auctionID)}
}

func (_c *MockAuctionValidator_IsAuctionExists_Call) Run(run func(auctionID uuid.UUID)) *MockAuctionValidator_IsAuctionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuctionValidator_IsAuctionExists_Call) Return(_a0 bool) *MockAuctionValidator_IsAuctionExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuctionValidator_IsAuctionExists_Call) RunAndReturn(run func(uuid.UUID) bool) *MockAuctionValidator_IsAuctionExists_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAuctionID provides a mock function with given fields: auctionID
func (_m *MockAuctionValidator) ValidateAuctionID(auctionID string) error {
	ret := _m.Called(auctionID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAuctionID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(auctionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuctionValidator_ValidateAuctionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAuctionID'
type MockAuctionValidator_ValidateAuctionID_Call struct {
	*mock.Call
}

// ValidateAuctionID is a helper method to define mock.On call
//   - auctionID string
func (_e *MockAuctionValidator_Expecter) ValidateAuctionID(auctionID interface{}) *MockAuctionValidator_ValidateAuctionID_Call {
	return &MockAuctionValidator_ValidateAuctionID_Call{Call: _e.mock.On("ValidateAuctionID", auctionID)}
}

func (_c *MockAuctionValidator_ValidateAuctionID_Call) Run(run func(auctionID string)) *MockAuctionValidator_ValidateAuctionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuctionValidator_ValidateAuctionID_Call) Return(_a0 error) *MockAuctionValidator_ValidateAuctionID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuctionValidator_ValidateAuctionID_Call) RunAndReturn(run func(string) error) *MockAuctionValidator_ValidateAuctionID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuctionValidator creates a new instance of MockAuctionValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuctionValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuctionValidator {
	mock := &MockAuctionValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
