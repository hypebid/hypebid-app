// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockChannelService is an autogenerated mock type for the ChannelService type
type MockChannelService struct {
	mock.Mock
}

type MockChannelService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChannelService) EXPECT() *MockChannelService_Expecter {
	return &MockChannelService_Expecter{mock: &_m.Mock}
}

// CreateChannel provides a mock function with given fields: name, sharesTotal
func (_m *MockChannelService) CreateChannel(name string, sharesTotal int) error {
	ret := _m.Called(name, sharesTotal)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(name, sharesTotal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChannelService_CreateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChannel'
type MockChannelService_CreateChannel_Call struct {
	*mock.Call
}

// CreateChannel is a helper method to define mock.On call
//   - name string
//   - sharesTotal int
func (_e *MockChannelService_Expecter) CreateChannel(name interface{}, sharesTotal interface{}) *MockChannelService_CreateChannel_Call {
	return &MockChannelService_CreateChannel_Call{Call: _e.mock.On("CreateChannel", name, sharesTotal)}
}

func (_c *MockChannelService_CreateChannel_Call) Run(run func(name string, sharesTotal int)) *MockChannelService_CreateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockChannelService_CreateChannel_Call) Return(_a0 error) *MockChannelService_CreateChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelService_CreateChannel_Call) RunAndReturn(run func(string, int) error) *MockChannelService_CreateChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllChannels provides a mock function with given fields:
func (_m *MockChannelService) GetAllChannels() ([]models.Channel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllChannels")
	}

	var r0 []models.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Channel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChannelService_GetAllChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllChannels'
type MockChannelService_GetAllChannels_Call struct {
	*mock.Call
}

// GetAllChannels is a helper method to define mock.On call
func (_e *MockChannelService_Expecter) GetAllChannels() *MockChannelService_GetAllChannels_Call {
	return &MockChannelService_GetAllChannels_Call{Call: _e.mock.On("GetAllChannels")}
}

func (_c *MockChannelService_GetAllChannels_Call) Run(run func()) *MockChannelService_GetAllChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChannelService_GetAllChannels_Call) Return(_a0 []models.Channel, _a1 error) *MockChannelService_GetAllChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelService_GetAllChannels_Call) RunAndReturn(run func() ([]models.Channel, error)) *MockChannelService_GetAllChannels_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelByID provides a mock function with given fields: channelID
func (_m *MockChannelService) GetChannelByID(channelID uuid.UUID) (*models.Channel, error) {
	ret := _m.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelByID")
	}

	var r0 *models.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Channel, error)); ok {
		return rf(channelID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Channel); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChannelService_GetChannelByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelByID'
type MockChannelService_GetChannelByID_Call struct {
	*mock.Call
}

// GetChannelByID is a helper method to define mock.On call
//   - channelID uuid.UUID
func (_e *MockChannelService_Expecter) GetChannelByID(channelID interface{}) *MockChannelService_GetChannelByID_Call {
	return &MockChannelService_GetChannelByID_Call{Call: _e.mock.On("GetChannelByID", channelID)}
}

func (_c *MockChannelService_GetChannelByID_Call) Run(run func(channelID uuid.UUID)) *MockChannelService_GetChannelByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockChannelService_GetChannelByID_Call) Return(_a0 *models.Channel, _a1 error) *MockChannelService_GetChannelByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelService_GetChannelByID_Call) RunAndReturn(run func(uuid.UUID) (*models.Channel, error)) *MockChannelService_GetChannelByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelByName provides a mock function with given fields: name
func (_m *MockChannelService) GetChannelByName(name string) (*models.Channel, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelByName")
	}

	var r0 *models.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Channel, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Channel); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChannelService_GetChannelByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelByName'
type MockChannelService_GetChannelByName_Call struct {
	*mock.Call
}

// GetChannelByName is a helper method to define mock.On call
//   - name string
func (_e *MockChannelService_Expecter) GetChannelByName(name interface{}) *MockChannelService_GetChannelByName_Call {
	return &MockChannelService_GetChannelByName_Call{Call: _e.mock.On("GetChannelByName", name)}
}

func (_c *MockChannelService_GetChannelByName_Call) Run(run func(name string)) *MockChannelService_GetChannelByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChannelService_GetChannelByName_Call) Return(_a0 *models.Channel, _a1 error) *MockChannelService_GetChannelByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelService_GetChannelByName_Call) RunAndReturn(run func(string) (*models.Channel, error)) *MockChannelService_GetChannelByName_Call {
	_c.Call.Return(run)
	return _c
}

// IsChannelExists provides a mock function with given fields: channelID
func (_m *MockChannelService) IsChannelExists(channelID uuid.UUID) bool {
	ret := _m.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for IsChannelExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(channelID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChannelService_IsChannelExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsChannelExists'
type MockChannelService_IsChannelExists_Call struct {
	*mock.Call
}

// IsChannelExists is a helper method to define mock.On call
//   - channelID uuid.UUID
func (_e *MockChannelService_Expecter) IsChannelExists(channelID interface{}) *MockChannelService_IsChannelExists_Call {
	return &MockChannelService_IsChannelExists_Call{Call: _e.mock.On("IsChannelExists", channelID)}
}

func (_c *MockChannelService_IsChannelExists_Call) Run(run func(channelID uuid.UUID)) *MockChannelService_IsChannelExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockChannelService_IsChannelExists_Call) Return(_a0 bool) *MockChannelService_IsChannelExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelService_IsChannelExists_Call) RunAndReturn(run func(uuid.UUID) bool) *MockChannelService_IsChannelExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsChannelNameTaken provides a mock function with given fields: name
func (_m *MockChannelService) IsChannelNameTaken(name string) bool {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for IsChannelNameTaken")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChannelService_IsChannelNameTaken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsChannelNameTaken'
type MockChannelService_IsChannelNameTaken_Call struct {
	*mock.Call
}

// IsChannelNameTaken is a helper method to define mock.On call
//   - name string
func (_e *MockChannelService_Expecter) IsChannelNameTaken(name interface{}) *MockChannelService_IsChannelNameTaken_Call {
	return &MockChannelService_IsChannelNameTaken_Call{Call: _e.mock.On("IsChannelNameTaken", name)}
}

func (_c *MockChannelService_IsChannelNameTaken_Call) Run(run func(name string)) *MockChannelService_IsChannelNameTaken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChannelService_IsChannelNameTaken_Call) Return(_a0 bool) *MockChannelService_IsChannelNameTaken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelService_IsChannelNameTaken_Call) RunAndReturn(run func(string) bool) *MockChannelService_IsChannelNameTaken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChannelService creates a new instance of MockChannelService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChannelService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChannelService {
	mock := &MockChannelService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
