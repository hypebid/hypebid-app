// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// MockAuctionService is an autogenerated mock type for the AuctionService type
type MockAuctionService struct {
	mock.Mock
}

type MockAuctionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuctionService) EXPECT() *MockAuctionService_Expecter {
	return &MockAuctionService_Expecter{mock: &_m.Mock}
}

// CreateAuction provides a mock function with given fields: marketInstanceID, marketChannelID
func (_m *MockAuctionService) CreateAuction(marketInstanceID uuid.UUID, marketChannelID uuid.UUID) (*models.Auction, error) {
	ret := _m.Called(marketInstanceID, marketChannelID)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuction")
	}

	var r0 *models.Auction
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (*models.Auction, error)); ok {
		return rf(marketInstanceID, marketChannelID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *models.Auction); ok {
		r0 = rf(marketInstanceID, marketChannelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auction)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(marketInstanceID, marketChannelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuctionService_CreateAuction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuction'
type MockAuctionService_CreateAuction_Call struct {
	*mock.Call
}

// CreateAuction is a helper method to define mock.On call
//   - marketInstanceID uuid.UUID
//   - marketChannelID uuid.UUID
func (_e *MockAuctionService_Expecter) CreateAuction(marketInstanceID interface{}, marketChannelID interface{}) *MockAuctionService_CreateAuction_Call {
	return &MockAuctionService_CreateAuction_Call{Call: _e.mock.On("CreateAuction", marketInstanceID, marketChannelID)}
}

func (_c *MockAuctionService_CreateAuction_Call) Run(run func(marketInstanceID uuid.UUID, marketChannelID uuid.UUID)) *MockAuctionService_CreateAuction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuctionService_CreateAuction_Call) Return(_a0 *models.Auction, _a1 error) *MockAuctionService_CreateAuction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuctionService_CreateAuction_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (*models.Auction, error)) *MockAuctionService_CreateAuction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuctionByID provides a mock function with given fields: auctionID
func (_m *MockAuctionService) GetAuctionByID(auctionID uuid.UUID) (*models.Auction, error) {
	ret := _m.Called(auctionID)

	if len(ret) == 0 {
		panic("no return value specified for GetAuctionByID")
	}

	var r0 *models.Auction
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Auction, error)); ok {
		return rf(auctionID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Auction); ok {
		r0 = rf(auctionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auction)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(auctionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuctionService_GetAuctionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuctionByID'
type MockAuctionService_GetAuctionByID_Call struct {
	*mock.Call
}

// GetAuctionByID is a helper method to define mock.On call
//   - auctionID uuid.UUID
func (_e *MockAuctionService_Expecter) GetAuctionByID(auctionID interface{}) *MockAuctionService_GetAuctionByID_Call {
	return &MockAuctionService_GetAuctionByID_Call{Call: _e.mock.On("GetAuctionByID", auctionID)}
}

func (_c *MockAuctionService_GetAuctionByID_Call) Run(run func(auctionID uuid.UUID)) *MockAuctionService_GetAuctionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuctionService_GetAuctionByID_Call) Return(_a0 *models.Auction, _a1 error) *MockAuctionService_GetAuctionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuctionService_GetAuctionByID_Call) RunAndReturn(run func(uuid.UUID) (*models.Auction, error)) *MockAuctionService_GetAuctionByID_Call {
	_c.Call.Return(run)
	return _c
}

// IsAuctionExists provides a mock function with given fields: auctionID
func (_m *MockAuctionService) IsAuctionExists(auctionID uuid.UUID) bool {
	ret := _m.Called(auctionID)

	if len(ret) == 0 {
		panic("no return value specified for IsAuctionExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(auctionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAuctionService_IsAuctionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuctionExists'
type MockAuctionService_IsAuctionExists_Call struct {
	*mock.Call
}

// IsAuctionExists is a helper method to define mock.On call
//   - auctionID uuid.UUID
func (_e *MockAuctionService_Expecter) IsAuctionExists(auctionID interface{}) *MockAuctionService_IsAuctionExists_Call {
	return &MockAuctionService_IsAuctionExists_Call{Call: _e.mock.On("IsAuctionExists", auctionID)}
}

func (_c *MockAuctionService_IsAuctionExists_Call) Run(run func(auctionID uuid.UUID)) *MockAuctionService_IsAuctionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuctionService_IsAuctionExists_Call) Return(_a0 bool) *MockAuctionService_IsAuctionExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuctionService_IsAuctionExists_Call) RunAndReturn(run func(uuid.UUID) bool) *MockAuctionService_IsAuctionExists_Call {
	_c.Call.Return(run)
	return _c
}

// PlaceBid provides a mock function with given fields: instanceID, auctionID, userID, amount
func (_m *MockAuctionService) PlaceBid(instanceID uuid.UUID, auctionID uuid.UUID, userID uuid.UUID, amount float64) error {
	ret := _m.Called(instanceID, auctionID, userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for PlaceBid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID, float64) error); ok {
		r0 = rf(instanceID, auctionID, userID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuctionService_PlaceBid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlaceBid'
type MockAuctionService_PlaceBid_Call struct {
	*mock.Call
}

// PlaceBid is a helper method to define mock.On call
//   - instanceID uuid.UUID
//   - auctionID uuid.UUID
//   - userID uuid.UUID
//   - amount float64
func (_e *MockAuctionService_Expecter) PlaceBid(instanceID interface{}, auctionID interface{}, userID interface{}, amount interface{}) *MockAuctionService_PlaceBid_Call {
	return &MockAuctionService_PlaceBid_Call{Call: _e.mock.On("PlaceBid", instanceID, auctionID, userID, amount)}
}

func (_c *MockAuctionService_PlaceBid_Call) Run(run func(instanceID uuid.UUID, auctionID uuid.UUID, userID uuid.UUID, amount float64)) *MockAuctionService_PlaceBid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(float64))
	})
	return _c
}

func (_c *MockAuctionService_PlaceBid_Call) Return(_a0 error) *MockAuctionService_PlaceBid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuctionService_PlaceBid_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, uuid.UUID, float64) error) *MockAuctionService_PlaceBid_Call {
	_c.Call.Return(run)
	return _c
}

// StartAuction provides a mock function with given fields: auctionID, duration
func (_m *MockAuctionService) StartAuction(auctionID uuid.UUID, duration time.Duration) (*models.Auction, error) {
	ret := _m.Called(auctionID, duration)

	if len(ret) == 0 {
		panic("no return value specified for StartAuction")
	}

	var r0 *models.Auction
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Duration) (*models.Auction, error)); ok {
		return rf(auctionID, duration)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, time.Duration) *models.Auction); ok {
		r0 = rf(auctionID, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auction)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, time.Duration) error); ok {
		r1 = rf(auctionID, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuctionService_StartAuction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartAuction'
type MockAuctionService_StartAuction_Call struct {
	*mock.Call
}

// StartAuction is a helper method to define mock.On call
//   - auctionID uuid.UUID
//   - duration time.Duration
func (_e *MockAuctionService_Expecter) StartAuction(auctionID interface{}, duration interface{}) *MockAuctionService_StartAuction_Call {
	return &MockAuctionService_StartAuction_Call{Call: _e.mock.On("StartAuction", auctionID, duration)}
}

func (_c *MockAuctionService_StartAuction_Call) Run(run func(auctionID uuid.UUID, duration time.Duration)) *MockAuctionService_StartAuction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockAuctionService_StartAuction_Call) Return(_a0 *models.Auction, _a1 error) *MockAuctionService_StartAuction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuctionService_StartAuction_Call) RunAndReturn(run func(uuid.UUID, time.Duration) (*models.Auction, error)) *MockAuctionService_StartAuction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuctionService creates a new instance of MockAuctionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuctionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuctionService {
	mock := &MockAuctionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
