// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"
	oauth2 "golang.org/x/oauth2"

	uuid "github.com/google/uuid"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// AddCurrency provides a mock function with given fields: userID, amount
func (_m *MockUserService) AddCurrency(userID uuid.UUID, amount float64) (*models.User, error) {
	ret := _m.Called(userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for AddCurrency")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) (*models.User, error)); ok {
		return rf(userID, amount)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) *models.User); ok {
		r0 = rf(userID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, float64) error); ok {
		r1 = rf(userID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_AddCurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCurrency'
type MockUserService_AddCurrency_Call struct {
	*mock.Call
}

// AddCurrency is a helper method to define mock.On call
//   - userID uuid.UUID
//   - amount float64
func (_e *MockUserService_Expecter) AddCurrency(userID interface{}, amount interface{}) *MockUserService_AddCurrency_Call {
	return &MockUserService_AddCurrency_Call{Call: _e.mock.On("AddCurrency", userID, amount)}
}

func (_c *MockUserService_AddCurrency_Call) Run(run func(userID uuid.UUID, amount float64)) *MockUserService_AddCurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(float64))
	})
	return _c
}

func (_c *MockUserService_AddCurrency_Call) Return(_a0 *models.User, _a1 error) *MockUserService_AddCurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_AddCurrency_Call) RunAndReturn(run func(uuid.UUID, float64) (*models.User, error)) *MockUserService_AddCurrency_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: username, email, password
func (_m *MockUserService) CreateUser(username string, email string, password string) (*models.User, error) {
	ret := _m.Called(username, email, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*models.User, error)); ok {
		return rf(username, email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *models.User); ok {
		r0 = rf(username, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(username, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - username string
//   - email string
//   - password string
func (_e *MockUserService_Expecter) CreateUser(username interface{}, email interface{}, password interface{}) *MockUserService_CreateUser_Call {
	return &MockUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", username, email, password)}
}

func (_c *MockUserService_CreateUser_Call) Run(run func(username string, email string, password string)) *MockUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_CreateUser_Call) Return(_a0 *models.User, _a1 error) *MockUserService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_CreateUser_Call) RunAndReturn(run func(string, string, string) (*models.User, error)) *MockUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindOrCreateTwitchUser provides a mock function with given fields: twitchData, token
func (_m *MockUserService) FindOrCreateTwitchUser(twitchData *models.TwitchUser, token *oauth2.Token) (*models.User, error) {
	ret := _m.Called(twitchData, token)

	if len(ret) == 0 {
		panic("no return value specified for FindOrCreateTwitchUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.TwitchUser, *oauth2.Token) (*models.User, error)); ok {
		return rf(twitchData, token)
	}
	if rf, ok := ret.Get(0).(func(*models.TwitchUser, *oauth2.Token) *models.User); ok {
		r0 = rf(twitchData, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.TwitchUser, *oauth2.Token) error); ok {
		r1 = rf(twitchData, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_FindOrCreateTwitchUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOrCreateTwitchUser'
type MockUserService_FindOrCreateTwitchUser_Call struct {
	*mock.Call
}

// FindOrCreateTwitchUser is a helper method to define mock.On call
//   - twitchData *models.TwitchUser
//   - token *oauth2.Token
func (_e *MockUserService_Expecter) FindOrCreateTwitchUser(twitchData interface{}, token interface{}) *MockUserService_FindOrCreateTwitchUser_Call {
	return &MockUserService_FindOrCreateTwitchUser_Call{Call: _e.mock.On("FindOrCreateTwitchUser", twitchData, token)}
}

func (_c *MockUserService_FindOrCreateTwitchUser_Call) Run(run func(twitchData *models.TwitchUser, token *oauth2.Token)) *MockUserService_FindOrCreateTwitchUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.TwitchUser), args[1].(*oauth2.Token))
	})
	return _c
}

func (_c *MockUserService_FindOrCreateTwitchUser_Call) Return(_a0 *models.User, _a1 error) *MockUserService_FindOrCreateTwitchUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_FindOrCreateTwitchUser_Call) RunAndReturn(run func(*models.TwitchUser, *oauth2.Token) (*models.User, error)) *MockUserService_FindOrCreateTwitchUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *MockUserService) GetUserByEmail(email string) (*models.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockUserService_Expecter) GetUserByEmail(email interface{}) *MockUserService_GetUserByEmail_Call {
	return &MockUserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", email)}
}

func (_c *MockUserService_GetUserByEmail_Call) Run(run func(email string)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) Return(_a0 *models.User, _a1 error) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) RunAndReturn(run func(string) (*models.User, error)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: userID
func (_m *MockUserService) GetUserByID(userID uuid.UUID) (*models.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - userID uuid.UUID
func (_e *MockUserService_Expecter) GetUserByID(userID interface{}) *MockUserService_GetUserByID_Call {
	return &MockUserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", userID)}
}

func (_c *MockUserService_GetUserByID_Call) Run(run func(userID uuid.UUID)) *MockUserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserService_GetUserByID_Call) Return(_a0 *models.User, _a1 error) *MockUserService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserByID_Call) RunAndReturn(run func(uuid.UUID) (*models.User, error)) *MockUserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserCurrency provides a mock function with given fields: userID
func (_m *MockUserService) GetUserCurrency(userID uuid.UUID) (float64, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCurrency")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (float64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) float64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserCurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserCurrency'
type MockUserService_GetUserCurrency_Call struct {
	*mock.Call
}

// GetUserCurrency is a helper method to define mock.On call
//   - userID uuid.UUID
func (_e *MockUserService_Expecter) GetUserCurrency(userID interface{}) *MockUserService_GetUserCurrency_Call {
	return &MockUserService_GetUserCurrency_Call{Call: _e.mock.On("GetUserCurrency", userID)}
}

func (_c *MockUserService_GetUserCurrency_Call) Run(run func(userID uuid.UUID)) *MockUserService_GetUserCurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserService_GetUserCurrency_Call) Return(_a0 float64, _a1 error) *MockUserService_GetUserCurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserCurrency_Call) RunAndReturn(run func(uuid.UUID) (float64, error)) *MockUserService_GetUserCurrency_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserCurrency provides a mock function with given fields: userID, amount
func (_m *MockUserService) SetUserCurrency(userID uuid.UUID, amount float64) (*models.User, error) {
	ret := _m.Called(userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for SetUserCurrency")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) (*models.User, error)); ok {
		return rf(userID, amount)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) *models.User); ok {
		r0 = rf(userID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, float64) error); ok {
		r1 = rf(userID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_SetUserCurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserCurrency'
type MockUserService_SetUserCurrency_Call struct {
	*mock.Call
}

// SetUserCurrency is a helper method to define mock.On call
//   - userID uuid.UUID
//   - amount float64
func (_e *MockUserService_Expecter) SetUserCurrency(userID interface{}, amount interface{}) *MockUserService_SetUserCurrency_Call {
	return &MockUserService_SetUserCurrency_Call{Call: _e.mock.On("SetUserCurrency", userID, amount)}
}

func (_c *MockUserService_SetUserCurrency_Call) Run(run func(userID uuid.UUID, amount float64)) *MockUserService_SetUserCurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(float64))
	})
	return _c
}

func (_c *MockUserService_SetUserCurrency_Call) Return(_a0 *models.User, _a1 error) *MockUserService_SetUserCurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_SetUserCurrency_Call) RunAndReturn(run func(uuid.UUID, float64) (*models.User, error)) *MockUserService_SetUserCurrency_Call {
	_c.Call.Return(run)
	return _c
}

// SubtractCurrency provides a mock function with given fields: userID, amount
func (_m *MockUserService) SubtractCurrency(userID uuid.UUID, amount float64) (*models.User, error) {
	ret := _m.Called(userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for SubtractCurrency")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) (*models.User, error)); ok {
		return rf(userID, amount)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) *models.User); ok {
		r0 = rf(userID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, float64) error); ok {
		r1 = rf(userID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_SubtractCurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubtractCurrency'
type MockUserService_SubtractCurrency_Call struct {
	*mock.Call
}

// SubtractCurrency is a helper method to define mock.On call
//   - userID uuid.UUID
//   - amount float64
func (_e *MockUserService_Expecter) SubtractCurrency(userID interface{}, amount interface{}) *MockUserService_SubtractCurrency_Call {
	return &MockUserService_SubtractCurrency_Call{Call: _e.mock.On("SubtractCurrency", userID, amount)}
}

func (_c *MockUserService_SubtractCurrency_Call) Run(run func(userID uuid.UUID, amount float64)) *MockUserService_SubtractCurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(float64))
	})
	return _c
}

func (_c *MockUserService_SubtractCurrency_Call) Return(_a0 *models.User, _a1 error) *MockUserService_SubtractCurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_SubtractCurrency_Call) RunAndReturn(run func(uuid.UUID, float64) (*models.User, error)) *MockUserService_SubtractCurrency_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: user
func (_m *MockUserService) UpdateUser(user *models.User) (*models.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (*models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *models.User
func (_e *MockUserService_Expecter) UpdateUser(user interface{}) *MockUserService_UpdateUser_Call {
	return &MockUserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *MockUserService_UpdateUser_Call) Run(run func(user *models.User)) *MockUserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockUserService_UpdateUser_Call) Return(_a0 *models.User, _a1 error) *MockUserService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_UpdateUser_Call) RunAndReturn(run func(*models.User) (*models.User, error)) *MockUserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUserBalance provides a mock function with given fields: userID, amount
func (_m *MockUserService) ValidateUserBalance(userID uuid.UUID, amount float64) bool {
	ret := _m.Called(userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserBalance")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) bool); ok {
		r0 = rf(userID, amount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockUserService_ValidateUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUserBalance'
type MockUserService_ValidateUserBalance_Call struct {
	*mock.Call
}

// ValidateUserBalance is a helper method to define mock.On call
//   - userID uuid.UUID
//   - amount float64
func (_e *MockUserService_Expecter) ValidateUserBalance(userID interface{}, amount interface{}) *MockUserService_ValidateUserBalance_Call {
	return &MockUserService_ValidateUserBalance_Call{Call: _e.mock.On("ValidateUserBalance", userID, amount)}
}

func (_c *MockUserService_ValidateUserBalance_Call) Run(run func(userID uuid.UUID, amount float64)) *MockUserService_ValidateUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(float64))
	})
	return _c
}

func (_c *MockUserService_ValidateUserBalance_Call) Return(_a0 bool) *MockUserService_ValidateUserBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_ValidateUserBalance_Call) RunAndReturn(run func(uuid.UUID, float64) bool) *MockUserService_ValidateUserBalance_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUserForBid provides a mock function with given fields: userID, amount
func (_m *MockUserService) ValidateUserForBid(userID uuid.UUID, amount float64) error {
	ret := _m.Called(userID, amount)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserForBid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, float64) error); ok {
		r0 = rf(userID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_ValidateUserForBid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUserForBid'
type MockUserService_ValidateUserForBid_Call struct {
	*mock.Call
}

// ValidateUserForBid is a helper method to define mock.On call
//   - userID uuid.UUID
//   - amount float64
func (_e *MockUserService_Expecter) ValidateUserForBid(userID interface{}, amount interface{}) *MockUserService_ValidateUserForBid_Call {
	return &MockUserService_ValidateUserForBid_Call{Call: _e.mock.On("ValidateUserForBid", userID, amount)}
}

func (_c *MockUserService_ValidateUserForBid_Call) Run(run func(userID uuid.UUID, amount float64)) *MockUserService_ValidateUserForBid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(float64))
	})
	return _c
}

func (_c *MockUserService_ValidateUserForBid_Call) Return(_a0 error) *MockUserService_ValidateUserForBid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_ValidateUserForBid_Call) RunAndReturn(run func(uuid.UUID, float64) error) *MockUserService_ValidateUserForBid_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
