// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockMarketChannelService is an autogenerated mock type for the MarketChannelService type
type MockMarketChannelService struct {
	mock.Mock
}

type MockMarketChannelService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMarketChannelService) EXPECT() *MockMarketChannelService_Expecter {
	return &MockMarketChannelService_Expecter{mock: &_m.Mock}
}

// GetMarketChannelByID provides a mock function with given fields: marketChannelID
func (_m *MockMarketChannelService) GetMarketChannelByID(marketChannelID uuid.UUID) (*models.MarketChannel, error) {
	ret := _m.Called(marketChannelID)

	if len(ret) == 0 {
		panic("no return value specified for GetMarketChannelByID")
	}

	var r0 *models.MarketChannel
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.MarketChannel, error)); ok {
		return rf(marketChannelID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.MarketChannel); ok {
		r0 = rf(marketChannelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MarketChannel)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(marketChannelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketChannelService_GetMarketChannelByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMarketChannelByID'
type MockMarketChannelService_GetMarketChannelByID_Call struct {
	*mock.Call
}

// GetMarketChannelByID is a helper method to define mock.On call
//   - marketChannelID uuid.UUID
func (_e *MockMarketChannelService_Expecter) GetMarketChannelByID(marketChannelID interface{}) *MockMarketChannelService_GetMarketChannelByID_Call {
	return &MockMarketChannelService_GetMarketChannelByID_Call{Call: _e.mock.On("GetMarketChannelByID", marketChannelID)}
}

func (_c *MockMarketChannelService_GetMarketChannelByID_Call) Run(run func(marketChannelID uuid.UUID)) *MockMarketChannelService_GetMarketChannelByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketChannelService_GetMarketChannelByID_Call) Return(_a0 *models.MarketChannel, _a1 error) *MockMarketChannelService_GetMarketChannelByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketChannelService_GetMarketChannelByID_Call) RunAndReturn(run func(uuid.UUID) (*models.MarketChannel, error)) *MockMarketChannelService_GetMarketChannelByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMarketChannelsByInstanceID provides a mock function with given fields: instanceId
func (_m *MockMarketChannelService) GetMarketChannelsByInstanceID(instanceId uuid.UUID) ([]models.MarketChannel, error) {
	ret := _m.Called(instanceId)

	if len(ret) == 0 {
		panic("no return value specified for GetMarketChannelsByInstanceID")
	}

	var r0 []models.MarketChannel
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.MarketChannel, error)); ok {
		return rf(instanceId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.MarketChannel); ok {
		r0 = rf(instanceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MarketChannel)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(instanceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketChannelService_GetMarketChannelsByInstanceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMarketChannelsByInstanceID'
type MockMarketChannelService_GetMarketChannelsByInstanceID_Call struct {
	*mock.Call
}

// GetMarketChannelsByInstanceID is a helper method to define mock.On call
//   - instanceId uuid.UUID
func (_e *MockMarketChannelService_Expecter) GetMarketChannelsByInstanceID(instanceId interface{}) *MockMarketChannelService_GetMarketChannelsByInstanceID_Call {
	return &MockMarketChannelService_GetMarketChannelsByInstanceID_Call{Call: _e.mock.On("GetMarketChannelsByInstanceID", instanceId)}
}

func (_c *MockMarketChannelService_GetMarketChannelsByInstanceID_Call) Run(run func(instanceId uuid.UUID)) *MockMarketChannelService_GetMarketChannelsByInstanceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketChannelService_GetMarketChannelsByInstanceID_Call) Return(_a0 []models.MarketChannel, _a1 error) *MockMarketChannelService_GetMarketChannelsByInstanceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketChannelService_GetMarketChannelsByInstanceID_Call) RunAndReturn(run func(uuid.UUID) ([]models.MarketChannel, error)) *MockMarketChannelService_GetMarketChannelsByInstanceID_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeMarketChannel provides a mock function with given fields: instanceId, channelId, totalShares, sharePrice
func (_m *MockMarketChannelService) InitializeMarketChannel(instanceId uuid.UUID, channelId uuid.UUID, totalShares int, sharePrice float64) (*models.MarketChannel, error) {
	ret := _m.Called(instanceId, channelId, totalShares, sharePrice)

	if len(ret) == 0 {
		panic("no return value specified for InitializeMarketChannel")
	}

	var r0 *models.MarketChannel
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int, float64) (*models.MarketChannel, error)); ok {
		return rf(instanceId, channelId, totalShares, sharePrice)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int, float64) *models.MarketChannel); ok {
		r0 = rf(instanceId, channelId, totalShares, sharePrice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MarketChannel)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, int, float64) error); ok {
		r1 = rf(instanceId, channelId, totalShares, sharePrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketChannelService_InitializeMarketChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeMarketChannel'
type MockMarketChannelService_InitializeMarketChannel_Call struct {
	*mock.Call
}

// InitializeMarketChannel is a helper method to define mock.On call
//   - instanceId uuid.UUID
//   - channelId uuid.UUID
//   - totalShares int
//   - sharePrice float64
func (_e *MockMarketChannelService_Expecter) InitializeMarketChannel(instanceId interface{}, channelId interface{}, totalShares interface{}, sharePrice interface{}) *MockMarketChannelService_InitializeMarketChannel_Call {
	return &MockMarketChannelService_InitializeMarketChannel_Call{Call: _e.mock.On("InitializeMarketChannel", instanceId, channelId, totalShares, sharePrice)}
}

func (_c *MockMarketChannelService_InitializeMarketChannel_Call) Run(run func(instanceId uuid.UUID, channelId uuid.UUID, totalShares int, sharePrice float64)) *MockMarketChannelService_InitializeMarketChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(int), args[3].(float64))
	})
	return _c
}

func (_c *MockMarketChannelService_InitializeMarketChannel_Call) Return(_a0 *models.MarketChannel, _a1 error) *MockMarketChannelService_InitializeMarketChannel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketChannelService_InitializeMarketChannel_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, int, float64) (*models.MarketChannel, error)) *MockMarketChannelService_InitializeMarketChannel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMarketChannelService creates a new instance of MockMarketChannelService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMarketChannelService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMarketChannelService {
	mock := &MockMarketChannelService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
