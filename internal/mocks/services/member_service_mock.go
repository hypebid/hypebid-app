// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockMemberService is an autogenerated mock type for the MemberService type
type MockMemberService struct {
	mock.Mock
}

type MockMemberService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMemberService) EXPECT() *MockMemberService_Expecter {
	return &MockMemberService_Expecter{mock: &_m.Mock}
}

// CreateMember provides a mock function with given fields: marketInstanceID, userID
func (_m *MockMemberService) CreateMember(marketInstanceID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(marketInstanceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(marketInstanceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemberService_CreateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMember'
type MockMemberService_CreateMember_Call struct {
	*mock.Call
}

// CreateMember is a helper method to define mock.On call
//   - marketInstanceID uuid.UUID
//   - userID uuid.UUID
func (_e *MockMemberService_Expecter) CreateMember(marketInstanceID interface{}, userID interface{}) *MockMemberService_CreateMember_Call {
	return &MockMemberService_CreateMember_Call{Call: _e.mock.On("CreateMember", marketInstanceID, userID)}
}

func (_c *MockMemberService_CreateMember_Call) Run(run func(marketInstanceID uuid.UUID, userID uuid.UUID)) *MockMemberService_CreateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockMemberService_CreateMember_Call) Return(_a0 error) *MockMemberService_CreateMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemberService_CreateMember_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) error) *MockMemberService_CreateMember_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMembersForInstance provides a mock function with given fields: marketInstanceID
func (_m *MockMemberService) GetAllMembersForInstance(marketInstanceID uuid.UUID) ([]models.Member, error) {
	ret := _m.Called(marketInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMembersForInstance")
	}

	var r0 []models.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Member, error)); ok {
		return rf(marketInstanceID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Member); ok {
		r0 = rf(marketInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(marketInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemberService_GetAllMembersForInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMembersForInstance'
type MockMemberService_GetAllMembersForInstance_Call struct {
	*mock.Call
}

// GetAllMembersForInstance is a helper method to define mock.On call
//   - marketInstanceID uuid.UUID
func (_e *MockMemberService_Expecter) GetAllMembersForInstance(marketInstanceID interface{}) *MockMemberService_GetAllMembersForInstance_Call {
	return &MockMemberService_GetAllMembersForInstance_Call{Call: _e.mock.On("GetAllMembersForInstance", marketInstanceID)}
}

func (_c *MockMemberService_GetAllMembersForInstance_Call) Run(run func(marketInstanceID uuid.UUID)) *MockMemberService_GetAllMembersForInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMemberService_GetAllMembersForInstance_Call) Return(_a0 []models.Member, _a1 error) *MockMemberService_GetAllMembersForInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemberService_GetAllMembersForInstance_Call) RunAndReturn(run func(uuid.UUID) ([]models.Member, error)) *MockMemberService_GetAllMembersForInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMemberService creates a new instance of MockMemberService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMemberService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMemberService {
	mock := &MockMemberService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
