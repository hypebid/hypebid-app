// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockMarketInstanceService is an autogenerated mock type for the MarketInstanceService type
type MockMarketInstanceService struct {
	mock.Mock
}

type MockMarketInstanceService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMarketInstanceService) EXPECT() *MockMarketInstanceService_Expecter {
	return &MockMarketInstanceService_Expecter{mock: &_m.Mock}
}

// CreateMarketInstance provides a mock function with given fields: name, durationDays, email, userID
func (_m *MockMarketInstanceService) CreateMarketInstance(name string, durationDays int, email string, userID uuid.UUID) (*models.MarketInstance, error) {
	ret := _m.Called(name, durationDays, email, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateMarketInstance")
	}

	var r0 *models.MarketInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, string, uuid.UUID) (*models.MarketInstance, error)); ok {
		return rf(name, durationDays, email, userID)
	}
	if rf, ok := ret.Get(0).(func(string, int, string, uuid.UUID) *models.MarketInstance); ok {
		r0 = rf(name, durationDays, email, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MarketInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, string, uuid.UUID) error); ok {
		r1 = rf(name, durationDays, email, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketInstanceService_CreateMarketInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMarketInstance'
type MockMarketInstanceService_CreateMarketInstance_Call struct {
	*mock.Call
}

// CreateMarketInstance is a helper method to define mock.On call
//   - name string
//   - durationDays int
//   - email string
//   - userID uuid.UUID
func (_e *MockMarketInstanceService_Expecter) CreateMarketInstance(name interface{}, durationDays interface{}, email interface{}, userID interface{}) *MockMarketInstanceService_CreateMarketInstance_Call {
	return &MockMarketInstanceService_CreateMarketInstance_Call{Call: _e.mock.On("CreateMarketInstance", name, durationDays, email, userID)}
}

func (_c *MockMarketInstanceService_CreateMarketInstance_Call) Run(run func(name string, durationDays int, email string, userID uuid.UUID)) *MockMarketInstanceService_CreateMarketInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(string), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketInstanceService_CreateMarketInstance_Call) Return(_a0 *models.MarketInstance, _a1 error) *MockMarketInstanceService_CreateMarketInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketInstanceService_CreateMarketInstance_Call) RunAndReturn(run func(string, int, string, uuid.UUID) (*models.MarketInstance, error)) *MockMarketInstanceService_CreateMarketInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMarketInstances provides a mock function with given fields:
func (_m *MockMarketInstanceService) GetAllMarketInstances() ([]models.MarketInstance, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMarketInstances")
	}

	var r0 []models.MarketInstance
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.MarketInstance, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.MarketInstance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MarketInstance)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketInstanceService_GetAllMarketInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMarketInstances'
type MockMarketInstanceService_GetAllMarketInstances_Call struct {
	*mock.Call
}

// GetAllMarketInstances is a helper method to define mock.On call
func (_e *MockMarketInstanceService_Expecter) GetAllMarketInstances() *MockMarketInstanceService_GetAllMarketInstances_Call {
	return &MockMarketInstanceService_GetAllMarketInstances_Call{Call: _e.mock.On("GetAllMarketInstances")}
}

func (_c *MockMarketInstanceService_GetAllMarketInstances_Call) Run(run func()) *MockMarketInstanceService_GetAllMarketInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMarketInstanceService_GetAllMarketInstances_Call) Return(_a0 []models.MarketInstance, _a1 error) *MockMarketInstanceService_GetAllMarketInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketInstanceService_GetAllMarketInstances_Call) RunAndReturn(run func() ([]models.MarketInstance, error)) *MockMarketInstanceService_GetAllMarketInstances_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMarketInstancesByUserID provides a mock function with given fields: userID
func (_m *MockMarketInstanceService) GetAllMarketInstancesByUserID(userID uuid.UUID) ([]models.MarketInstance, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMarketInstancesByUserID")
	}

	var r0 []models.MarketInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.MarketInstance, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.MarketInstance); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MarketInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketInstanceService_GetAllMarketInstancesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMarketInstancesByUserID'
type MockMarketInstanceService_GetAllMarketInstancesByUserID_Call struct {
	*mock.Call
}

// GetAllMarketInstancesByUserID is a helper method to define mock.On call
//   - userID uuid.UUID
func (_e *MockMarketInstanceService_Expecter) GetAllMarketInstancesByUserID(userID interface{}) *MockMarketInstanceService_GetAllMarketInstancesByUserID_Call {
	return &MockMarketInstanceService_GetAllMarketInstancesByUserID_Call{Call: _e.mock.On("GetAllMarketInstancesByUserID", userID)}
}

func (_c *MockMarketInstanceService_GetAllMarketInstancesByUserID_Call) Run(run func(userID uuid.UUID)) *MockMarketInstanceService_GetAllMarketInstancesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketInstanceService_GetAllMarketInstancesByUserID_Call) Return(_a0 []models.MarketInstance, _a1 error) *MockMarketInstanceService_GetAllMarketInstancesByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketInstanceService_GetAllMarketInstancesByUserID_Call) RunAndReturn(run func(uuid.UUID) ([]models.MarketInstance, error)) *MockMarketInstanceService_GetAllMarketInstancesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMarketInstanceByID provides a mock function with given fields: marketInstanceID
func (_m *MockMarketInstanceService) GetMarketInstanceByID(marketInstanceID uuid.UUID) (*models.MarketInstance, error) {
	ret := _m.Called(marketInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetMarketInstanceByID")
	}

	var r0 *models.MarketInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.MarketInstance, error)); ok {
		return rf(marketInstanceID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.MarketInstance); ok {
		r0 = rf(marketInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MarketInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(marketInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketInstanceService_GetMarketInstanceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMarketInstanceByID'
type MockMarketInstanceService_GetMarketInstanceByID_Call struct {
	*mock.Call
}

// GetMarketInstanceByID is a helper method to define mock.On call
//   - marketInstanceID uuid.UUID
func (_e *MockMarketInstanceService_Expecter) GetMarketInstanceByID(marketInstanceID interface{}) *MockMarketInstanceService_GetMarketInstanceByID_Call {
	return &MockMarketInstanceService_GetMarketInstanceByID_Call{Call: _e.mock.On("GetMarketInstanceByID", marketInstanceID)}
}

func (_c *MockMarketInstanceService_GetMarketInstanceByID_Call) Run(run func(marketInstanceID uuid.UUID)) *MockMarketInstanceService_GetMarketInstanceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketInstanceService_GetMarketInstanceByID_Call) Return(_a0 *models.MarketInstance, _a1 error) *MockMarketInstanceService_GetMarketInstanceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketInstanceService_GetMarketInstanceByID_Call) RunAndReturn(run func(uuid.UUID) (*models.MarketInstance, error)) *MockMarketInstanceService_GetMarketInstanceByID_Call {
	_c.Call.Return(run)
	return _c
}

// StartMarketInstance provides a mock function with given fields: instanceID
func (_m *MockMarketInstanceService) StartMarketInstance(instanceID uuid.UUID) (*models.MarketInstance, error) {
	ret := _m.Called(instanceID)

	if len(ret) == 0 {
		panic("no return value specified for StartMarketInstance")
	}

	var r0 *models.MarketInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.MarketInstance, error)); ok {
		return rf(instanceID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.MarketInstance); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MarketInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketInstanceService_StartMarketInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartMarketInstance'
type MockMarketInstanceService_StartMarketInstance_Call struct {
	*mock.Call
}

// StartMarketInstance is a helper method to define mock.On call
//   - instanceID uuid.UUID
func (_e *MockMarketInstanceService_Expecter) StartMarketInstance(instanceID interface{}) *MockMarketInstanceService_StartMarketInstance_Call {
	return &MockMarketInstanceService_StartMarketInstance_Call{Call: _e.mock.On("StartMarketInstance", instanceID)}
}

func (_c *MockMarketInstanceService_StartMarketInstance_Call) Run(run func(instanceID uuid.UUID)) *MockMarketInstanceService_StartMarketInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketInstanceService_StartMarketInstance_Call) Return(_a0 *models.MarketInstance, _a1 error) *MockMarketInstanceService_StartMarketInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketInstanceService_StartMarketInstance_Call) RunAndReturn(run func(uuid.UUID) (*models.MarketInstance, error)) *MockMarketInstanceService_StartMarketInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMarketInstanceService creates a new instance of MockMarketInstanceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMarketInstanceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMarketInstanceService {
	mock := &MockMarketInstanceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
