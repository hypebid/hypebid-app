// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAuctionRepository is an autogenerated mock type for the AuctionRepository type
type MockAuctionRepository struct {
	mock.Mock
}

type MockAuctionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuctionRepository) EXPECT() *MockAuctionRepository_Expecter {
	return &MockAuctionRepository_Expecter{mock: &_m.Mock}
}

// CreateAuction provides a mock function with given fields: auction
func (_m *MockAuctionRepository) CreateAuction(auction *models.Auction) (*models.Auction, error) {
	ret := _m.Called(auction)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuction")
	}

	var r0 *models.Auction
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Auction) (*models.Auction, error)); ok {
		return rf(auction)
	}
	if rf, ok := ret.Get(0).(func(*models.Auction) *models.Auction); ok {
		r0 = rf(auction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auction)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Auction) error); ok {
		r1 = rf(auction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuctionRepository_CreateAuction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuction'
type MockAuctionRepository_CreateAuction_Call struct {
	*mock.Call
}

// CreateAuction is a helper method to define mock.On call
//   - auction *models.Auction
func (_e *MockAuctionRepository_Expecter) CreateAuction(auction interface{}) *MockAuctionRepository_CreateAuction_Call {
	return &MockAuctionRepository_CreateAuction_Call{Call: _e.mock.On("CreateAuction", auction)}
}

func (_c *MockAuctionRepository_CreateAuction_Call) Run(run func(auction *models.Auction)) *MockAuctionRepository_CreateAuction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Auction))
	})
	return _c
}

func (_c *MockAuctionRepository_CreateAuction_Call) Return(_a0 *models.Auction, _a1 error) *MockAuctionRepository_CreateAuction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuctionRepository_CreateAuction_Call) RunAndReturn(run func(*models.Auction) (*models.Auction, error)) *MockAuctionRepository_CreateAuction_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuctionByID provides a mock function with given fields: auctionID
func (_m *MockAuctionRepository) GetAuctionByID(auctionID uuid.UUID) (*models.Auction, error) {
	ret := _m.Called(auctionID)

	if len(ret) == 0 {
		panic("no return value specified for GetAuctionByID")
	}

	var r0 *models.Auction
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Auction, error)); ok {
		return rf(auctionID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Auction); ok {
		r0 = rf(auctionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auction)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(auctionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuctionRepository_GetAuctionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuctionByID'
type MockAuctionRepository_GetAuctionByID_Call struct {
	*mock.Call
}

// GetAuctionByID is a helper method to define mock.On call
//   - auctionID uuid.UUID
func (_e *MockAuctionRepository_Expecter) GetAuctionByID(auctionID interface{}) *MockAuctionRepository_GetAuctionByID_Call {
	return &MockAuctionRepository_GetAuctionByID_Call{Call: _e.mock.On("GetAuctionByID", auctionID)}
}

func (_c *MockAuctionRepository_GetAuctionByID_Call) Run(run func(auctionID uuid.UUID)) *MockAuctionRepository_GetAuctionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuctionRepository_GetAuctionByID_Call) Return(_a0 *models.Auction, _a1 error) *MockAuctionRepository_GetAuctionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuctionRepository_GetAuctionByID_Call) RunAndReturn(run func(uuid.UUID) (*models.Auction, error)) *MockAuctionRepository_GetAuctionByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuction provides a mock function with given fields: auction
func (_m *MockAuctionRepository) UpdateAuction(auction *models.Auction) error {
	ret := _m.Called(auction)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Auction) error); ok {
		r0 = rf(auction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuctionRepository_UpdateAuction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuction'
type MockAuctionRepository_UpdateAuction_Call struct {
	*mock.Call
}

// UpdateAuction is a helper method to define mock.On call
//   - auction *models.Auction
func (_e *MockAuctionRepository_Expecter) UpdateAuction(auction interface{}) *MockAuctionRepository_UpdateAuction_Call {
	return &MockAuctionRepository_UpdateAuction_Call{Call: _e.mock.On("UpdateAuction", auction)}
}

func (_c *MockAuctionRepository_UpdateAuction_Call) Run(run func(auction *models.Auction)) *MockAuctionRepository_UpdateAuction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Auction))
	})
	return _c
}

func (_c *MockAuctionRepository_UpdateAuction_Call) Return(_a0 error) *MockAuctionRepository_UpdateAuction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuctionRepository_UpdateAuction_Call) RunAndReturn(run func(*models.Auction) error) *MockAuctionRepository_UpdateAuction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuctionRepository creates a new instance of MockAuctionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuctionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuctionRepository {
	mock := &MockAuctionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
