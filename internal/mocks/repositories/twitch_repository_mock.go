// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// MockTwitchRepository is an autogenerated mock type for the TwitchRepository type
type MockTwitchRepository struct {
	mock.Mock
}

type MockTwitchRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTwitchRepository) EXPECT() *MockTwitchRepository_Expecter {
	return &MockTwitchRepository_Expecter{mock: &_m.Mock}
}

// CreateTwitchUser provides a mock function with given fields: twitchUser
func (_m *MockTwitchRepository) CreateTwitchUser(twitchUser *models.TwitchUser) error {
	ret := _m.Called(twitchUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateTwitchUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TwitchUser) error); ok {
		r0 = rf(twitchUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwitchRepository_CreateTwitchUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTwitchUser'
type MockTwitchRepository_CreateTwitchUser_Call struct {
	*mock.Call
}

// CreateTwitchUser is a helper method to define mock.On call
//   - twitchUser *models.TwitchUser
func (_e *MockTwitchRepository_Expecter) CreateTwitchUser(twitchUser interface{}) *MockTwitchRepository_CreateTwitchUser_Call {
	return &MockTwitchRepository_CreateTwitchUser_Call{Call: _e.mock.On("CreateTwitchUser", twitchUser)}
}

func (_c *MockTwitchRepository_CreateTwitchUser_Call) Run(run func(twitchUser *models.TwitchUser)) *MockTwitchRepository_CreateTwitchUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.TwitchUser))
	})
	return _c
}

func (_c *MockTwitchRepository_CreateTwitchUser_Call) Return(_a0 error) *MockTwitchRepository_CreateTwitchUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwitchRepository_CreateTwitchUser_Call) RunAndReturn(run func(*models.TwitchUser) error) *MockTwitchRepository_CreateTwitchUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetTwitchUserByID provides a mock function with given fields: id
func (_m *MockTwitchRepository) GetTwitchUserByID(id string) (*models.TwitchUser, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTwitchUserByID")
	}

	var r0 *models.TwitchUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.TwitchUser, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.TwitchUser); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TwitchUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTwitchRepository_GetTwitchUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTwitchUserByID'
type MockTwitchRepository_GetTwitchUserByID_Call struct {
	*mock.Call
}

// GetTwitchUserByID is a helper method to define mock.On call
//   - id string
func (_e *MockTwitchRepository_Expecter) GetTwitchUserByID(id interface{}) *MockTwitchRepository_GetTwitchUserByID_Call {
	return &MockTwitchRepository_GetTwitchUserByID_Call{Call: _e.mock.On("GetTwitchUserByID", id)}
}

func (_c *MockTwitchRepository_GetTwitchUserByID_Call) Run(run func(id string)) *MockTwitchRepository_GetTwitchUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTwitchRepository_GetTwitchUserByID_Call) Return(_a0 *models.TwitchUser, _a1 error) *MockTwitchRepository_GetTwitchUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTwitchRepository_GetTwitchUserByID_Call) RunAndReturn(run func(string) (*models.TwitchUser, error)) *MockTwitchRepository_GetTwitchUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTwitchUser provides a mock function with given fields: twitchUser
func (_m *MockTwitchRepository) UpdateTwitchUser(twitchUser *models.TwitchUser) error {
	ret := _m.Called(twitchUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTwitchUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TwitchUser) error); ok {
		r0 = rf(twitchUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTwitchRepository_UpdateTwitchUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTwitchUser'
type MockTwitchRepository_UpdateTwitchUser_Call struct {
	*mock.Call
}

// UpdateTwitchUser is a helper method to define mock.On call
//   - twitchUser *models.TwitchUser
func (_e *MockTwitchRepository_Expecter) UpdateTwitchUser(twitchUser interface{}) *MockTwitchRepository_UpdateTwitchUser_Call {
	return &MockTwitchRepository_UpdateTwitchUser_Call{Call: _e.mock.On("UpdateTwitchUser", twitchUser)}
}

func (_c *MockTwitchRepository_UpdateTwitchUser_Call) Run(run func(twitchUser *models.TwitchUser)) *MockTwitchRepository_UpdateTwitchUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.TwitchUser))
	})
	return _c
}

func (_c *MockTwitchRepository_UpdateTwitchUser_Call) Return(_a0 error) *MockTwitchRepository_UpdateTwitchUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTwitchRepository_UpdateTwitchUser_Call) RunAndReturn(run func(*models.TwitchUser) error) *MockTwitchRepository_UpdateTwitchUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTwitchRepository creates a new instance of MockTwitchRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTwitchRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTwitchRepository {
	mock := &MockTwitchRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
