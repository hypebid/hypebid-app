// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockMemberRepository is an autogenerated mock type for the MemberRepository type
type MockMemberRepository struct {
	mock.Mock
}

type MockMemberRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMemberRepository) EXPECT() *MockMemberRepository_Expecter {
	return &MockMemberRepository_Expecter{mock: &_m.Mock}
}

// CreateMember provides a mock function with given fields: member
func (_m *MockMemberRepository) CreateMember(member *models.Member) error {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for CreateMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Member) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemberRepository_CreateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMember'
type MockMemberRepository_CreateMember_Call struct {
	*mock.Call
}

// CreateMember is a helper method to define mock.On call
//   - member *models.Member
func (_e *MockMemberRepository_Expecter) CreateMember(member interface{}) *MockMemberRepository_CreateMember_Call {
	return &MockMemberRepository_CreateMember_Call{Call: _e.mock.On("CreateMember", member)}
}

func (_c *MockMemberRepository_CreateMember_Call) Run(run func(member *models.Member)) *MockMemberRepository_CreateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Member))
	})
	return _c
}

func (_c *MockMemberRepository_CreateMember_Call) Return(_a0 error) *MockMemberRepository_CreateMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemberRepository_CreateMember_Call) RunAndReturn(run func(*models.Member) error) *MockMemberRepository_CreateMember_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMember provides a mock function with given fields: member
func (_m *MockMemberRepository) DeleteMember(member *models.Member) error {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Member) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemberRepository_DeleteMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMember'
type MockMemberRepository_DeleteMember_Call struct {
	*mock.Call
}

// DeleteMember is a helper method to define mock.On call
//   - member *models.Member
func (_e *MockMemberRepository_Expecter) DeleteMember(member interface{}) *MockMemberRepository_DeleteMember_Call {
	return &MockMemberRepository_DeleteMember_Call{Call: _e.mock.On("DeleteMember", member)}
}

func (_c *MockMemberRepository_DeleteMember_Call) Run(run func(member *models.Member)) *MockMemberRepository_DeleteMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Member))
	})
	return _c
}

func (_c *MockMemberRepository_DeleteMember_Call) Return(_a0 error) *MockMemberRepository_DeleteMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemberRepository_DeleteMember_Call) RunAndReturn(run func(*models.Member) error) *MockMemberRepository_DeleteMember_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMembersForInstance provides a mock function with given fields: instanceID
func (_m *MockMemberRepository) GetAllMembersForInstance(instanceID uuid.UUID) ([]models.Member, error) {
	ret := _m.Called(instanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMembersForInstance")
	}

	var r0 []models.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Member, error)); ok {
		return rf(instanceID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Member); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemberRepository_GetAllMembersForInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMembersForInstance'
type MockMemberRepository_GetAllMembersForInstance_Call struct {
	*mock.Call
}

// GetAllMembersForInstance is a helper method to define mock.On call
//   - instanceID uuid.UUID
func (_e *MockMemberRepository_Expecter) GetAllMembersForInstance(instanceID interface{}) *MockMemberRepository_GetAllMembersForInstance_Call {
	return &MockMemberRepository_GetAllMembersForInstance_Call{Call: _e.mock.On("GetAllMembersForInstance", instanceID)}
}

func (_c *MockMemberRepository_GetAllMembersForInstance_Call) Run(run func(instanceID uuid.UUID)) *MockMemberRepository_GetAllMembersForInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMemberRepository_GetAllMembersForInstance_Call) Return(_a0 []models.Member, _a1 error) *MockMemberRepository_GetAllMembersForInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemberRepository_GetAllMembersForInstance_Call) RunAndReturn(run func(uuid.UUID) ([]models.Member, error)) *MockMemberRepository_GetAllMembersForInstance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMember provides a mock function with given fields: member
func (_m *MockMemberRepository) UpdateMember(member *models.Member) error {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Member) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemberRepository_UpdateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMember'
type MockMemberRepository_UpdateMember_Call struct {
	*mock.Call
}

// UpdateMember is a helper method to define mock.On call
//   - member *models.Member
func (_e *MockMemberRepository_Expecter) UpdateMember(member interface{}) *MockMemberRepository_UpdateMember_Call {
	return &MockMemberRepository_UpdateMember_Call{Call: _e.mock.On("UpdateMember", member)}
}

func (_c *MockMemberRepository_UpdateMember_Call) Run(run func(member *models.Member)) *MockMemberRepository_UpdateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Member))
	})
	return _c
}

func (_c *MockMemberRepository_UpdateMember_Call) Return(_a0 error) *MockMemberRepository_UpdateMember_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemberRepository_UpdateMember_Call) RunAndReturn(run func(*models.Member) error) *MockMemberRepository_UpdateMember_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMemberRepository creates a new instance of MockMemberRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMemberRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMemberRepository {
	mock := &MockMemberRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
