// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockChannelRepository is an autogenerated mock type for the ChannelRepository type
type MockChannelRepository struct {
	mock.Mock
}

type MockChannelRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChannelRepository) EXPECT() *MockChannelRepository_Expecter {
	return &MockChannelRepository_Expecter{mock: &_m.Mock}
}

// CreateChannel provides a mock function with given fields: channel
func (_m *MockChannelRepository) CreateChannel(channel *models.Channel) error {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Channel) error); ok {
		r0 = rf(channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChannelRepository_CreateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChannel'
type MockChannelRepository_CreateChannel_Call struct {
	*mock.Call
}

// CreateChannel is a helper method to define mock.On call
//   - channel *models.Channel
func (_e *MockChannelRepository_Expecter) CreateChannel(channel interface{}) *MockChannelRepository_CreateChannel_Call {
	return &MockChannelRepository_CreateChannel_Call{Call: _e.mock.On("CreateChannel", channel)}
}

func (_c *MockChannelRepository_CreateChannel_Call) Run(run func(channel *models.Channel)) *MockChannelRepository_CreateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Channel))
	})
	return _c
}

func (_c *MockChannelRepository_CreateChannel_Call) Return(_a0 error) *MockChannelRepository_CreateChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChannelRepository_CreateChannel_Call) RunAndReturn(run func(*models.Channel) error) *MockChannelRepository_CreateChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllChannels provides a mock function with given fields:
func (_m *MockChannelRepository) GetAllChannels() ([]models.Channel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllChannels")
	}

	var r0 []models.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Channel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChannelRepository_GetAllChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllChannels'
type MockChannelRepository_GetAllChannels_Call struct {
	*mock.Call
}

// GetAllChannels is a helper method to define mock.On call
func (_e *MockChannelRepository_Expecter) GetAllChannels() *MockChannelRepository_GetAllChannels_Call {
	return &MockChannelRepository_GetAllChannels_Call{Call: _e.mock.On("GetAllChannels")}
}

func (_c *MockChannelRepository_GetAllChannels_Call) Run(run func()) *MockChannelRepository_GetAllChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChannelRepository_GetAllChannels_Call) Return(_a0 []models.Channel, _a1 error) *MockChannelRepository_GetAllChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelRepository_GetAllChannels_Call) RunAndReturn(run func() ([]models.Channel, error)) *MockChannelRepository_GetAllChannels_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelByID provides a mock function with given fields: channelID
func (_m *MockChannelRepository) GetChannelByID(channelID uuid.UUID) (*models.Channel, error) {
	ret := _m.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelByID")
	}

	var r0 *models.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Channel, error)); ok {
		return rf(channelID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Channel); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChannelRepository_GetChannelByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelByID'
type MockChannelRepository_GetChannelByID_Call struct {
	*mock.Call
}

// GetChannelByID is a helper method to define mock.On call
//   - channelID uuid.UUID
func (_e *MockChannelRepository_Expecter) GetChannelByID(channelID interface{}) *MockChannelRepository_GetChannelByID_Call {
	return &MockChannelRepository_GetChannelByID_Call{Call: _e.mock.On("GetChannelByID", channelID)}
}

func (_c *MockChannelRepository_GetChannelByID_Call) Run(run func(channelID uuid.UUID)) *MockChannelRepository_GetChannelByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockChannelRepository_GetChannelByID_Call) Return(_a0 *models.Channel, _a1 error) *MockChannelRepository_GetChannelByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelRepository_GetChannelByID_Call) RunAndReturn(run func(uuid.UUID) (*models.Channel, error)) *MockChannelRepository_GetChannelByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelByName provides a mock function with given fields: name
func (_m *MockChannelRepository) GetChannelByName(name string) (*models.Channel, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelByName")
	}

	var r0 *models.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Channel, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Channel); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChannelRepository_GetChannelByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelByName'
type MockChannelRepository_GetChannelByName_Call struct {
	*mock.Call
}

// GetChannelByName is a helper method to define mock.On call
//   - name string
func (_e *MockChannelRepository_Expecter) GetChannelByName(name interface{}) *MockChannelRepository_GetChannelByName_Call {
	return &MockChannelRepository_GetChannelByName_Call{Call: _e.mock.On("GetChannelByName", name)}
}

func (_c *MockChannelRepository_GetChannelByName_Call) Run(run func(name string)) *MockChannelRepository_GetChannelByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChannelRepository_GetChannelByName_Call) Return(_a0 *models.Channel, _a1 error) *MockChannelRepository_GetChannelByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChannelRepository_GetChannelByName_Call) RunAndReturn(run func(string) (*models.Channel, error)) *MockChannelRepository_GetChannelByName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChannelRepository creates a new instance of MockChannelRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChannelRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChannelRepository {
	mock := &MockChannelRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
