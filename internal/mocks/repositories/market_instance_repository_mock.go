// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/hypebid/hypebid-app/pkg/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockMarketInstanceRepository is an autogenerated mock type for the MarketInstanceRepository type
type MockMarketInstanceRepository struct {
	mock.Mock
}

type MockMarketInstanceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMarketInstanceRepository) EXPECT() *MockMarketInstanceRepository_Expecter {
	return &MockMarketInstanceRepository_Expecter{mock: &_m.Mock}
}

// CreateMarketInstance provides a mock function with given fields: instance
func (_m *MockMarketInstanceRepository) CreateMarketInstance(instance *models.MarketInstance) error {
	ret := _m.Called(instance)

	if len(ret) == 0 {
		panic("no return value specified for CreateMarketInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.MarketInstance) error); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMarketInstanceRepository_CreateMarketInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMarketInstance'
type MockMarketInstanceRepository_CreateMarketInstance_Call struct {
	*mock.Call
}

// CreateMarketInstance is a helper method to define mock.On call
//   - instance *models.MarketInstance
func (_e *MockMarketInstanceRepository_Expecter) CreateMarketInstance(instance interface{}) *MockMarketInstanceRepository_CreateMarketInstance_Call {
	return &MockMarketInstanceRepository_CreateMarketInstance_Call{Call: _e.mock.On("CreateMarketInstance", instance)}
}

func (_c *MockMarketInstanceRepository_CreateMarketInstance_Call) Run(run func(instance *models.MarketInstance)) *MockMarketInstanceRepository_CreateMarketInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.MarketInstance))
	})
	return _c
}

func (_c *MockMarketInstanceRepository_CreateMarketInstance_Call) Return(_a0 error) *MockMarketInstanceRepository_CreateMarketInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMarketInstanceRepository_CreateMarketInstance_Call) RunAndReturn(run func(*models.MarketInstance) error) *MockMarketInstanceRepository_CreateMarketInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllActiveMarketInstances provides a mock function with given fields:
func (_m *MockMarketInstanceRepository) GetAllActiveMarketInstances() ([]models.MarketInstance, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllActiveMarketInstances")
	}

	var r0 []models.MarketInstance
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.MarketInstance, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.MarketInstance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MarketInstance)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketInstanceRepository_GetAllActiveMarketInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllActiveMarketInstances'
type MockMarketInstanceRepository_GetAllActiveMarketInstances_Call struct {
	*mock.Call
}

// GetAllActiveMarketInstances is a helper method to define mock.On call
func (_e *MockMarketInstanceRepository_Expecter) GetAllActiveMarketInstances() *MockMarketInstanceRepository_GetAllActiveMarketInstances_Call {
	return &MockMarketInstanceRepository_GetAllActiveMarketInstances_Call{Call: _e.mock.On("GetAllActiveMarketInstances")}
}

func (_c *MockMarketInstanceRepository_GetAllActiveMarketInstances_Call) Run(run func()) *MockMarketInstanceRepository_GetAllActiveMarketInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMarketInstanceRepository_GetAllActiveMarketInstances_Call) Return(_a0 []models.MarketInstance, _a1 error) *MockMarketInstanceRepository_GetAllActiveMarketInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketInstanceRepository_GetAllActiveMarketInstances_Call) RunAndReturn(run func() ([]models.MarketInstance, error)) *MockMarketInstanceRepository_GetAllActiveMarketInstances_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMarketInstances provides a mock function with given fields:
func (_m *MockMarketInstanceRepository) GetAllMarketInstances() ([]models.MarketInstance, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMarketInstances")
	}

	var r0 []models.MarketInstance
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.MarketInstance, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.MarketInstance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MarketInstance)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketInstanceRepository_GetAllMarketInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMarketInstances'
type MockMarketInstanceRepository_GetAllMarketInstances_Call struct {
	*mock.Call
}

// GetAllMarketInstances is a helper method to define mock.On call
func (_e *MockMarketInstanceRepository_Expecter) GetAllMarketInstances() *MockMarketInstanceRepository_GetAllMarketInstances_Call {
	return &MockMarketInstanceRepository_GetAllMarketInstances_Call{Call: _e.mock.On("GetAllMarketInstances")}
}

func (_c *MockMarketInstanceRepository_GetAllMarketInstances_Call) Run(run func()) *MockMarketInstanceRepository_GetAllMarketInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMarketInstanceRepository_GetAllMarketInstances_Call) Return(_a0 []models.MarketInstance, _a1 error) *MockMarketInstanceRepository_GetAllMarketInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketInstanceRepository_GetAllMarketInstances_Call) RunAndReturn(run func() ([]models.MarketInstance, error)) *MockMarketInstanceRepository_GetAllMarketInstances_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMarketInstancesByUserID provides a mock function with given fields: userID
func (_m *MockMarketInstanceRepository) GetAllMarketInstancesByUserID(userID uuid.UUID) ([]models.MarketInstance, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMarketInstancesByUserID")
	}

	var r0 []models.MarketInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.MarketInstance, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.MarketInstance); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MarketInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketInstanceRepository_GetAllMarketInstancesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMarketInstancesByUserID'
type MockMarketInstanceRepository_GetAllMarketInstancesByUserID_Call struct {
	*mock.Call
}

// GetAllMarketInstancesByUserID is a helper method to define mock.On call
//   - userID uuid.UUID
func (_e *MockMarketInstanceRepository_Expecter) GetAllMarketInstancesByUserID(userID interface{}) *MockMarketInstanceRepository_GetAllMarketInstancesByUserID_Call {
	return &MockMarketInstanceRepository_GetAllMarketInstancesByUserID_Call{Call: _e.mock.On("GetAllMarketInstancesByUserID", userID)}
}

func (_c *MockMarketInstanceRepository_GetAllMarketInstancesByUserID_Call) Run(run func(userID uuid.UUID)) *MockMarketInstanceRepository_GetAllMarketInstancesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketInstanceRepository_GetAllMarketInstancesByUserID_Call) Return(_a0 []models.MarketInstance, _a1 error) *MockMarketInstanceRepository_GetAllMarketInstancesByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketInstanceRepository_GetAllMarketInstancesByUserID_Call) RunAndReturn(run func(uuid.UUID) ([]models.MarketInstance, error)) *MockMarketInstanceRepository_GetAllMarketInstancesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMarketInstanceByID provides a mock function with given fields: instanceID
func (_m *MockMarketInstanceRepository) GetMarketInstanceByID(instanceID uuid.UUID) (*models.MarketInstance, error) {
	ret := _m.Called(instanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetMarketInstanceByID")
	}

	var r0 *models.MarketInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.MarketInstance, error)); ok {
		return rf(instanceID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.MarketInstance); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MarketInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketInstanceRepository_GetMarketInstanceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMarketInstanceByID'
type MockMarketInstanceRepository_GetMarketInstanceByID_Call struct {
	*mock.Call
}

// GetMarketInstanceByID is a helper method to define mock.On call
//   - instanceID uuid.UUID
func (_e *MockMarketInstanceRepository_Expecter) GetMarketInstanceByID(instanceID interface{}) *MockMarketInstanceRepository_GetMarketInstanceByID_Call {
	return &MockMarketInstanceRepository_GetMarketInstanceByID_Call{Call: _e.mock.On("GetMarketInstanceByID", instanceID)}
}

func (_c *MockMarketInstanceRepository_GetMarketInstanceByID_Call) Run(run func(instanceID uuid.UUID)) *MockMarketInstanceRepository_GetMarketInstanceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketInstanceRepository_GetMarketInstanceByID_Call) Return(_a0 *models.MarketInstance, _a1 error) *MockMarketInstanceRepository_GetMarketInstanceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketInstanceRepository_GetMarketInstanceByID_Call) RunAndReturn(run func(uuid.UUID) (*models.MarketInstance, error)) *MockMarketInstanceRepository_GetMarketInstanceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMarketInstanceByNameAndUserID provides a mock function with given fields: name, userID
func (_m *MockMarketInstanceRepository) GetMarketInstanceByNameAndUserID(name string, userID uuid.UUID) (*models.MarketInstance, error) {
	ret := _m.Called(name, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMarketInstanceByNameAndUserID")
	}

	var r0 *models.MarketInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) (*models.MarketInstance, error)); ok {
		return rf(name, userID)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) *models.MarketInstance); ok {
		r0 = rf(name, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MarketInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = rf(name, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarketInstanceRepository_GetMarketInstanceByNameAndUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMarketInstanceByNameAndUserID'
type MockMarketInstanceRepository_GetMarketInstanceByNameAndUserID_Call struct {
	*mock.Call
}

// GetMarketInstanceByNameAndUserID is a helper method to define mock.On call
//   - name string
//   - userID uuid.UUID
func (_e *MockMarketInstanceRepository_Expecter) GetMarketInstanceByNameAndUserID(name interface{}, userID interface{}) *MockMarketInstanceRepository_GetMarketInstanceByNameAndUserID_Call {
	return &MockMarketInstanceRepository_GetMarketInstanceByNameAndUserID_Call{Call: _e.mock.On("GetMarketInstanceByNameAndUserID", name, userID)}
}

func (_c *MockMarketInstanceRepository_GetMarketInstanceByNameAndUserID_Call) Run(run func(name string, userID uuid.UUID)) *MockMarketInstanceRepository_GetMarketInstanceByNameAndUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketInstanceRepository_GetMarketInstanceByNameAndUserID_Call) Return(_a0 *models.MarketInstance, _a1 error) *MockMarketInstanceRepository_GetMarketInstanceByNameAndUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarketInstanceRepository_GetMarketInstanceByNameAndUserID_Call) RunAndReturn(run func(string, uuid.UUID) (*models.MarketInstance, error)) *MockMarketInstanceRepository_GetMarketInstanceByNameAndUserID_Call {
	_c.Call.Return(run)
	return _c
}

// IsMarketInstanceExists provides a mock function with given fields: instanceID
func (_m *MockMarketInstanceRepository) IsMarketInstanceExists(instanceID uuid.UUID) bool {
	ret := _m.Called(instanceID)

	if len(ret) == 0 {
		panic("no return value specified for IsMarketInstanceExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(instanceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMarketInstanceRepository_IsMarketInstanceExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMarketInstanceExists'
type MockMarketInstanceRepository_IsMarketInstanceExists_Call struct {
	*mock.Call
}

// IsMarketInstanceExists is a helper method to define mock.On call
//   - instanceID uuid.UUID
func (_e *MockMarketInstanceRepository_Expecter) IsMarketInstanceExists(instanceID interface{}) *MockMarketInstanceRepository_IsMarketInstanceExists_Call {
	return &MockMarketInstanceRepository_IsMarketInstanceExists_Call{Call: _e.mock.On("IsMarketInstanceExists", instanceID)}
}

func (_c *MockMarketInstanceRepository_IsMarketInstanceExists_Call) Run(run func(instanceID uuid.UUID)) *MockMarketInstanceRepository_IsMarketInstanceExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockMarketInstanceRepository_IsMarketInstanceExists_Call) Return(_a0 bool) *MockMarketInstanceRepository_IsMarketInstanceExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMarketInstanceRepository_IsMarketInstanceExists_Call) RunAndReturn(run func(uuid.UUID) bool) *MockMarketInstanceRepository_IsMarketInstanceExists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMarketInstance provides a mock function with given fields: instance
func (_m *MockMarketInstanceRepository) UpdateMarketInstance(instance *models.MarketInstance) error {
	ret := _m.Called(instance)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMarketInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.MarketInstance) error); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMarketInstanceRepository_UpdateMarketInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMarketInstance'
type MockMarketInstanceRepository_UpdateMarketInstance_Call struct {
	*mock.Call
}

// UpdateMarketInstance is a helper method to define mock.On call
//   - instance *models.MarketInstance
func (_e *MockMarketInstanceRepository_Expecter) UpdateMarketInstance(instance interface{}) *MockMarketInstanceRepository_UpdateMarketInstance_Call {
	return &MockMarketInstanceRepository_UpdateMarketInstance_Call{Call: _e.mock.On("UpdateMarketInstance", instance)}
}

func (_c *MockMarketInstanceRepository_UpdateMarketInstance_Call) Run(run func(instance *models.MarketInstance)) *MockMarketInstanceRepository_UpdateMarketInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.MarketInstance))
	})
	return _c
}

func (_c *MockMarketInstanceRepository_UpdateMarketInstance_Call) Return(_a0 error) *MockMarketInstanceRepository_UpdateMarketInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMarketInstanceRepository_UpdateMarketInstance_Call) RunAndReturn(run func(*models.MarketInstance) error) *MockMarketInstanceRepository_UpdateMarketInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMarketInstanceRepository creates a new instance of MockMarketInstanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMarketInstanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMarketInstanceRepository {
	mock := &MockMarketInstanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
